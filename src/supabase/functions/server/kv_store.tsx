/* AUTOGENERATED FILE - MODIFIED FOR LOCAL REACT USAGE */

/* Table schema:
CREATE TABLE kv_store_84115a1d (
  key TEXT NOT NULL PRIMARY KEY,
  value JSONB NOT NULL
);
*/
import { createClient } from "@supabase/supabase-js";


const supabase = createClient(
  import.meta.env.VITE_SUPABASE_URL,
  import.meta.env.VITE_SUPABASE_ANON_KEY
);

// Set stores a key-value pair in the database.
export const set = async (key: string, value: any): Promise<void> => {
  const { error } = await supabase.from("kv_store_84115a1d").upsert({ key, value });
  if (error) throw new Error(error.message);
};

// Get retrieves a key-value pair from the database.
export const get = async (key: string): Promise<any> => {
  const { data, error } = await supabase
    .from("kv_store_84115a1d")
    .select("value")
    .eq("key", key)
    .maybeSingle();
  if (error) throw new Error(error.message);
  return data?.value;
};

// Delete deletes a key-value pair.
export const del = async (key: string): Promise<void> => {
  const { error } = await supabase.from("kv_store_84115a1d").delete().eq("key", key);
  if (error) throw new Error(error.message);
};

// Set multiple key-value pairs.
export const mset = async (keys: string[], values: any[]): Promise<void> => {
  const records = keys.map((k, i) => ({ key: k, value: values[i] }));
  const { error } = await supabase.from("kv_store_84115a1d").upsert(records);
  if (error) throw new Error(error.message);
};

// Get multiple key-value pairs.
export const mget = async (keys: string[]): Promise<any[]> => {
  const { data, error } = await supabase
    .from("kv_store_84115a1d")
    .select("value")
    .in("key", keys);
  if (error) throw new Error(error.message);
  return data?.map((d) => d.value) ?? [];
};

// Delete multiple key-value pairs.
export const mdel = async (keys: string[]): Promise<void> => {
  const { error } = await supabase
    .from("kv_store_84115a1d")
    .delete()
    .in("key", keys);
  if (error) throw new Error(error.message);
};

// Search for key-value pairs by prefix.
export const getByPrefix = async (prefix: string): Promise<any[]> => {
  const { data, error } = await supabase
    .from("kv_store_84115a1d")
    .select("key, value")
    .like("key", `${prefix}%`);
  if (error) throw new Error(error.message);
  return data?.map((d) => d.value) ?? [];
};
